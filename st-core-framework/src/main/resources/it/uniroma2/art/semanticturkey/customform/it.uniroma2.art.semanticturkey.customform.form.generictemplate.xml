<?xml version="1.0" encoding="UTF-8"?>
<customForm id="it.uniroma2.art.semanticturkey.customform.form.basictemplate" name="Template" type="graph">
	<description>This is a template of a CustomForm for custom constructors. It contains an empty graph section, while the node section just defines the nodes provided by the standard form. It is not mandatory to use them all, use them only if necessary. Warning: do not change the name of the stdForm/ features or it will broke the behaviour of the CustomForm.</description>
	<ref><![CDATA[prefix coda: <http://art.uniroma2.it/coda/contracts/>
prefix dc: <http://purl.org/dc/terms/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix skosxl: <http://www.w3.org/2008/05/skos-xl#>
			
rule it.uniroma2.art.semanticturkey.customform.form.generictemplate id:template {
	nodes = {
		
		/*
		features available as subpaths of "stdForm" are those provided by the standard fields prompted by the standard
		form associated to the various resource types (skos:Concept, skos:ConceptScheme, etc...).
		
		features available as subpaths of "session" are contextual information always available in the generation of any
		resource
		
		The standard form for skos resources (skos:Concept, skos:ConceptScheme, skos:Collection)
		is composed by two input fields:
			uri (optional): prompts the URI of the creating resource. If not filled, the stdForm/resource feature is in 
			                any case filled with the generated URI assigned to the resource, so that the $resource node
			                will always be valued
			label: prompts the label (and the related language section) of the resource to be created 
		
		The standard form for other resources (classes, instances, properties) is composed of the sole uri.
		
		*/
	
	    // THE FOLLOWING NODES ARE ALWAYS CREATED (DEPENDING ON THE RESOURCE TYPE)
	
		//uri of the new resource
		resource uri stdForm/resource .
		
		//in case of SKOS project, the label of the resource is a simple literal
		label literal stdForm/label .
		
		//in case of SKOSXL project, the label of the resource is a skosxl:Label composed by its URI and a skos:literalForm
		xLabel uri stdForm/xLabel .
		lexicalForm literal stdForm/lexicalForm .
		
		//language tag of the label
		labelLang literal stdForm/labelLang .
		
		//the user logged in the current session can be referenced too
		user uri session/user .
		
		// THE FOLLOWING NODES ARE JUST EXAMPLES, WHICH CREATE ADDITIONAL FIELDS IN THE FORM
		
		/*
		lang literal userPrompt/lang .
		altLabel literal(coda:langString($lang)) userPrompt/altLabel  . // for skos or skosxl lexicalizations
		altLabelURI uri(coda:randIdGen()) . // only for skosxl 
		
		*/
	}
	graph = {
		/*
		Please use the OPTIONAL pattern for all the information that might not be available. A triple with non ground 
		nodes will make the rule (silently) fail and its whole information will not be added to the created resource 
				
		e.g. please use only the nodes from the standard form of the resource you intend to build with this form.
		Nodes from the standard form not available (e.g. a label for a generic resource, not a skos one) used here 
		without an OPTIONAL will make the rule fail and thus all the produced information will be lost
		*/
		
		
		// some example, using the example material above
		
		/*
		this works for all resources:		
		$resource dc:publisher $user .
		*/
		
		/*
		can be used for concepts with skos lexicalizations, adding information for the further altLabel in the form
		$resource skos:altLabel $altLabel .
		*/
		
		/*
		can be used for concepts with skosxl lexicalizations, adding information for the further altLabel in the form
		$xLabel dc:publisher $user .
		
		$resource skosxl:altLabel $altLabelURI .
		$altLabelURI a skosxl:Label .
		$altLabelURI skosxl:literalForm  $altLabel .		
		
		*/
			
	}
}
]]></ref>
</customForm>