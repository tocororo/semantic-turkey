<?xml version="1.0"?>
<?xml-stylesheet href="chrome://semantic-turkey/content/class/class.css" type="text/css"?>
<bindings xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="tree-individuals-widget"
		extends="chrome://semantic-turkey/content/widgetRDFResources/tree/widgetTree.xml#tree-widget">
		<implementation>

			<field name="dblclickMethod" />
			<filed name="individualTreeObj" />
			<filed name="currentClass" />


			<constructor>
				<![CDATA[
					if (typeof art_semanticturkey == 'undefined')
						var art_semanticturkey = {};
					Components.utils.import("resource://stmodules/StResUtils.jsm", art_semanticturkey);
					Components.utils.import("resource://stmodules/ARTResources.jsm", art_semanticturkey);
					Components.utils.import("resource://stmodules/Logger.jsm", art_semanticturkey);
					Components.utils.import("resource://stservices/SERVICE_Cls.jsm", art_semanticturkey);
					Components.utils.import("resource://stservices/SERVICE_Individual.jsm", art_semanticturkey);
				]]>
			</constructor>

			<method name="setIndividualTreeObj">
				<parameter name="individualTreeObject" />
				<body>
					<![CDATA[
						this.individualTreeObj = individualTreeObject;
					]]>
				</body>
			</method>

			<method name="getIndividualTreeObj">
				<body>
					<![CDATA[
						return this.individualTreeObj;
					]]>
				</body>
			</method>

			<method name="setCurrentClass">
				<parameter name="rdfNodeClass" />
				<body>
					<![CDATA[
						this.currentClass = rdfNodeClass;
					]]>
				</body>
			</method>

			<method name="getCurrentClass">
				<body>
					<![CDATA[
						return this.currentClass;
					]]>
				</body>
			</method>



			<method name="addClassesTreeToMonitor">
				<parameter name="classesTree" />
				<body>
					<![CDATA[
						//TODO
					]]>
				</body>
			</method>

			<method name="addInstance">
				<parameter name="instanceRDFnode" />
				<parameter name="parentClassRDFNode" />
				<body>
					<![CDATA[
						var tr = document.createElement("treerow");
						var tc = document.createElement("treecell");
						
						var instName = instanceRDFnode.getShow();
						tc.setAttribute("label", instName);					
						tc.rdfNode = instanceRDFnode;
						tc.parentCls = parentClassRDFNode;
						var deleteForbidden;
						deleteForbidden = instanceRDFnode.deleteForbidden;
						if(deleteForbidden == null)
							deleteForbidden = false;
						tc.setAttribute("deleteForbidden", deleteForbidden);
						if (deleteForbidden == "true" || instanceRDFnode.explicit == "false")
							tc.setAttribute("properties", "role-"+instanceRDFnode.getRole()+"-noexpl");
						else
							tc.setAttribute("properties", "role-"+instanceRDFnode.getRole()+"-explicit");
											
						tr.appendChild(tc);
						
						var ti = document.createElement("treeitem");
						ti.appendChild(tr);
						document.getAnonymousElementByAttribute(this, "anonid", "rootClassTreeChildren")
							.appendChild(ti);
					]]>
				</body>
			</method>

			<method name="checkClassInfo">
				<parameter name="classTreeitem" />
				<parameter name="classRDFNode" />
				<body>
					<![CDATA[
						var parentClassNameURI = classRDFNode.getURI()
						var parentClassNameShow = "";
						
						var numTotInst = classRDFNode.numInst;
						var hasSubClasses = classRDFNode.more; // this can be "1" or "0" or null
				
						if (hasSubClasses != null) {
							var isAlreadyContainer = classTreeitem.getAttribute("container");
							var isOpen = classTreeitem.getAttribute("open");
							if (hasSubClasses == "1") {
								classTreeitem.setAttribute("container", true);
								if (isAlreadyContainer == false)
									classTreeitem.setAttribute("open", false);
							} else { // == 0
								classTreeitem.setAttribute("container", false);
							}
						}
						var treecell = classTreeitem.getElementsByTagName("treecell")[0];
						treecell.setAttribute("numInst", numTotInst);
						parentClassNameShow = treecell.getAttribute("show");
						if (numTotInst > 0)
							treecell.setAttribute("label", treecell.getAttribute("show") + "("
											+ numTotInst + ")");
						else
							treecell.setAttribute("label", treecell.getAttribute("show"));
					]]>
				</body>
			</method>

			<method name="infoOnRDFNodeEvent">
				<parameter name="event" />
				<body>
					<![CDATA[
						var rdfNode = event.detail.rdfNode;
						alert("inizio funzione infoOnRDFNodeEvent dentro widgetInDividualTree");
						alert("this = "+this);
						alert("this.tagName = "+this.tagName);
						alert("this.getAttribute(class) = "+this.getAttribute("class"));
						alert("this.setIndividualsForClass = "+this.setIndividualsForClass);
						
						this.setIndividualsForClass(rdfNode);
					]]>
				</body>
			</method>
			
			<method name="setIndividualsForClass">
				<parameter name="classRDFNode" />
				<body>
					<![CDATA[
						var responseArray = art_semanticturkey.STRequests.Cls
								.getClassAndInstancesInfo(classRDFNode.getURI(), true);
				
						//set the current class
						this.setCurrentClass(classRDFNode);
					
						// now clean and add the instances
						this.clearTree();
						this.setTitle("Instances of "+classRDFNode.getShow());
					
						var instancesResList = responseArray['instances'];
						
						for (var j=0; j<instancesResList.length; j++) {
							this.addInstance(instancesResList[j], classRDFNode);
						}
					]]>
				</body>
			</method>

			<method name="createStandardContextMenu">
				<body>
					<![CDATA[
						//TODO add the action associated to these menuitem
					
						//Create Individual
						this.addToContextMenu("menuItemWebLinks", "WebLinks", 
							"chrome://semantic-turkey/skin/images/world20.png",
							this.weblinksIndividualCM);
						
						//Create SubClass
						this.addToContextMenu("menuItemRenameIndividual", "Rename",
							"chrome://semantic-turkey/skin/images/empty20x20.png",
							this.renameIndividualCM);
						
						//Delete Class
						this.addToContextMenu("menuItemRemoveIndividual", "Delete", 
							"chrome://semantic-turkey/skin/images/individual_delete.png",
							this.deleteIndividualCM);
					
					]]>
				</body>
			</method>

			<!-- Methods associated to the context menu -->
			<method name="deleteIndividualCM">
				<parameter name="event" />
				<body>
					<![CDATA[
					
						var currentWidgetTree = event.target.widgetTree;
						var instanceRDFNode = currentWidgetTree.getSelectedRDFNode();
						try {
							alert("trying to delete: "+ instanceRDFNode.getURI());
							
							//TODO
							
							/*var responseURI = art_semanticturkey.STRequests.Delete
									.removeInstance(instanceRDFNode.getURI());
							
							
							//check if the delete was ok
							currentWidgetTree.removeChild(instanceRDFNode);
							
							//throw the event that this individual was removed, so all other GUIs could update
							// themself
							*/
						}
						catch (e) {
							alert(e.name + ": " + e.message);
						}
					]]>
				</body>
			</method>

			<method name="renameIndividualCM">
				<parameter name="event" />
				<body>
					<![CDATA[
					
						var currentWidgetTree = event.target.widgetTree;
						var instanceRDFNode = currentWidgetTree.getSelectedRDFNode();
						try {
							alert("trying to rename: "+ instanceRDFNode.getURI());
							
							//TODO
						}
						catch (e) {
							alert(e.name + ": " + e.message);
						}
					]]>
				</body>
			</method>
			
			<method name="weblinksIndividualCM">
				<parameter name="event" />
				<body>
					<![CDATA[
					
						var currentWidgetTree = event.target.widgetTree;
						var instanceRDFNode = currentWidgetTree.getSelectedRDFNode();
						try {
							alert("trying to get the weblinks for : "+ instanceRDFNode.getURI());
							
							//TODO
						}
						catch (e) {
							alert(e.name + ": " + e.message);
						}
					]]>
				</body>
			</method>

			
			<method name="addDblClickFunction">
				<parameter name="functionToExecOnDBClick" />
				<body>
					<![CDATA[
						if(typeof functionToExecOnDBClick != 'undefined')
							dblclickMethod = functionToExecOnDBClick;
					]]>
				</body>
			</method>

		</implementation>

		<!-- EVENTS -->
		<handlers>
			<handler event="dblclickOnTree">
				<![CDATA[
					//alert("dblclick");
					//event.preventDefault();
    				//event.stopPropagation();
    				this.dblclickMethod(event); 
	     		]]>
			</handler>
		</handlers>

	</binding>

</bindings>