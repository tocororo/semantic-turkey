<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://semantic-turkey/content/property/property.css" type="text/css"?>
<!--  /*
  * The contents of this file are subject to the Mozilla Public License
  * Version 1.1 (the "License");  you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an "AS IS" basis,
  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  * the specific language governing rights and limitations under the License.
  *
  * The Original Code is SemanticTurkey.
  *
  * The Initial Developer of the Original Code is University of Roma Tor Vergata.
  * Portions created by University of Roma Tor Vergata are Copyright (C) 2007.
  * All Rights Reserved.
  *
  * SemanticTurkey was developed by the Artificial Intelligence Research Group
  * (art.uniroma2.it) at the University of Roma Tor Vergata (ART)
  * Current information about SemanticTurkey can be obtained at 
  * http://semanticturkey.uniroma2.it
  *
  */ -->


<!-- Daniele Bagni, Marco Cappella (2009): Pannello dell'ontology panel dove viene visualizzato l'albero delle propriet� in versione collaborativa -->
<window id="properties" title="Property Dialog"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	width="600" height="600"
>


<script src="chrome://global/content/nsDragAndDrop.js"/>
<script src="chrome://global/content/nsTransferable.js"/> 
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/classDragDrop.js"/>
<script type="application/x-javascript" src="chrome://semantic-turkey/content/http/http.js"/> 
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/ontologySearch.js"/>
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/repository.js"/>
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/initialize.js"/>
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/selectServer.js"/>
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/userType.js"/>
<script type="application/x-javascript" src="chrome://semantic-turkey/content/scripts/userProperties.js"/>
<script type="application/x-javascript">
   <![CDATA[

	var swap = readSwap();
	var server=readServer();
	if(swap=="1"){
   	 	
     	if(window.arguments!=null){
   
	 	    var subjectInstanceName = window.arguments[0].subjectInstanceName;	   
	 	    var objectInstanceName = window.arguments[0].objectInstanceName;	   
	 	    var parentClsName = window.arguments[0].parentClsName;                           
	 	    var paneltree =  window.arguments[0].tree;
	 	    var index = null;           
 			art_semanticturkey.HttpMgr.GETP("http://"+server+":1979/semantic_turkey/resources/stserver/STServer?service=property&request=getproperties&instanceQName="+encodeURIComponent(subjectInstanceName)+"&method=templateandvalued"); 
    	  }else{
    	  	var result = readProp();
      		//Daniele Bagni, Marco Cappella (2009):Vengono inviati al server gli hash degli utenti dei quali si � interessati a visualizzarne le risorse
			
			var request="http://"+server+":1979/semantic_turkey/resources/stserver/STServer?service=property&request=getPropertiesTree";
			var tt=0;
			var ts=0;
			var userHashValue=readUserHash();
			var foundUser=false;
			var newUsers = new Array();
			var newHash = new Array();
			var newColors = new Array();
			for(tt = 0;tt<result.hash.length;tt++){
				if(result.colors[tt]!="No"){
					request= request+"&hash_"+(tt-ts)+"="+result.hash[tt];
					
				}
				else ts++;
				if(result.hash[tt]==userHashValue){
					foundUser=true;
				}
				newUsers[tt]= result.users[tt];
				newHash[tt]=result.hash[tt];
				newColors[tt]=result.colors[tt];
			}
			if(!foundUser){
				request= request+"&hash_"+(tt-ts)+"="+userHashValue;
				newUsers[tt]= readUserName();
				newHash[tt]=userHashValue;
				newColors[tt]=9;
				writeProp(newUsers,newHash,newColors);
			}
			art_semanticturkey.HttpMgr.GETP(request);
			
    	  	
   		}
	  }    
      function getParentClsName(){
      	return parentClsName;
      }              
      function getthetree(){
      	return document.getElementById('myPropertyTree');
      }
      function getCallPanel(){
			return "property";
		}
      function getpaneltree() {
      	return paneltree;
      }
      
      //Daniele Bagni, Marco Cappella (2009):  funzione per l'aggiunta di una propriet� alla propria ontologia oppure al core dell'ontologia
	  function freezeprop(){
			getthetree().freezeProp('myPropertyTree',server,'property');
			var img = document.getElementById('refreshProp');
			art_semanticturkey.HttpMgr.GETP("http://"+server+":1979/semantic_turkey/resources/stserver/STServer?service=refresh&update=refresh");
			var tree = getthetree();
			var treeChildren = tree.getElementsByTagName('treechildren')[0];
			treeItemsNodes=treeChildren.getElementsByTagName("treeitem");	
			while(treeChildren.hasChildNodes()){
				treeChildren.removeChild(treeChildren.lastChild);
			}
			if(server=="127.0.0.1")
				art_semanticturkey.HttpMgr.GETP("http://"+server+":1979/semantic_turkey/resources/stserver/STServer?service=cls");
			else
				art_semanticturkey.HttpMgr.GETP(request);
			img.image = "images/PNG-Refresh1.png";
		}  
		
		//Daniele Bagni, Marco Cappella (2009): viene aperta la finestra che mostra le modifiche effettuate all'ontologia giorno per giorno ed alla chiusura di tale finestra refresh dell'albero
		function refreshTree(img){
      
      		window.openDialog('chrome://semantic-turkey/content/LoggingMod.xul','_blank','modal=yes,resizable,centerscreen', null); 
			art_semanticturkey.HttpMgr.GETP("http://"+server+":1979/semantic_turkey/resources/stserver/STServer?service=refresh&update=refresh");
			var tree = getthetree();
			var treeChildren = tree.getElementsByTagName('treechildren')[0];
			treeItemsNodes=treeChildren.getElementsByTagName("treeitem");	
			//EMPTY TREE
			while(treeChildren.hasChildNodes()){
				treeChildren.removeChild(treeChildren.lastChild);
			}
			_printToJSConsole("Dentro Refresh:");
			art_semanticturkey.HttpMgr.GETP(request);
			img.image = "images/PNG-Refresh1.png";
	}                      
   ]]>
</script>
<hbox flex="1" > 
<vbox flex="1" orient="vertical">
<grid flex="0">
  <columns>
    <column flex="0"/>
  </columns>
  <rows>
    <row> 
     <toolbox>
	    <!-- Daniele Bagni, Marco Cappella (2009): aggiunto polls management,refresh,legend e freeze -->
	    <toolbar id="findfiles-toolbar">
	     	<toolbarbutton id="createObjectProperty" image="images/propObject_create.png" onclick="getthetree().createProperty('ObjectProperty');" tooltiptext="Create Object Property"/>
		 	<toolbarbutton id="createDatatypeProperty" image="images/propDatatype_create.png" onclick="getthetree().createProperty('DatatypeProperty');" tooltiptext="Create Datatype Property"/>
		 	<toolbarbutton id="createAnnotationProperty" image="images/propAnnotation_create.png" onclick="getthetree().createProperty('AnnotationProperty');" tooltiptext="Create Annotation Property"/>
		 	<toolbarbutton id="createSubProperty"  image="images/prop_addSubProperty.png" onclick="getthetree().addSubProperty();" tooltiptext="Create SubProperty"/>
			<toolbarbutton id="removeProperty"  image="images/prop_delete.png" onclick="getthetree().deleteProperty(server);" tooltiptext="Remove Property"/>
			<toolbarbutton  id="pollsManagement"  image="images/istogramma.png" onclick="getthetree().pollsManagement(server);" tooltiptext="Polls"></toolbarbutton>
			<toolbarbutton  id="refreshProp"  image="images/PNG-Refresh1.png" onclick="refreshTree(this);" tooltiptext="Refresh"></toolbarbutton>
			<toolbarbutton  id="Legend"  image="images/legend.png" onclick="window.openDialog('chrome://semantic-turkey/content/legend.xul','_blank','modal=yes,alwaysRaised=yes,resizable,centerscreen', null);" tooltiptext="Legend"></toolbarbutton>
			<!--<toolbarbutton  id="Freeze"  image="images/snow.png" onclick="freezeprop();" tooltiptext="Freeze"></toolbarbutton>-->
		</toolbar>
	</toolbox>
</row>
 </rows>
</grid>
<popupset>
	<popup id="clipmenu" onpopupshowing="javascript:;">
		<menuitem id="popupCreateSubProperty" oncommand="getthetree().addSubProperty();">
		<menuitem-iconic >
				<image src="images/prop_addSubProperty.png"/>
				<label value="Add SubProperty"/> 						
			</menuitem-iconic>
		</menuitem>	
		<menuitem id="popupModifyName" label="Modify Property" oncommand="getthetree().modifyProperty();">
		<menuitem-iconic>
				<image src="images/empty20x20.png" flex="0"/> 
				<label value="Modify Property"/> 						
			</menuitem-iconic>
		</menuitem>
		<menuitem id="popupRemoveItem" oncommand="getthetree().deleteProperty(server);">
		<menuitem-iconic >
				<image src="images/prop_delete.png"/>
				<label value="Remove Property"/> 						
			</menuitem-iconic>		
		</menuitem>	
		<menuitem id="popupAddSynonym" label="Add a Synonym" oncommand="getthetree().addSynonym();">
		<menuitem-iconic>
				<image src="images/empty20x20.png" flex="0"/> 
				<label value="Add Synonym"/> 						
			</menuitem-iconic>
		</menuitem>
		<menuitem id="popupViewContexts" oncommand="getthetree().viewContexts(server);" flex="1">
			<menuitem-iconic flex="1">
				<image src="images/empty20x20.png" flex="0"/>
				<label value="View Contexts" flex="0"/> 						
			</menuitem-iconic>
		</menuitem>
		<menuitem oncommand="getthetree().commentsManagement(server,'[Property]');" flex="1">
			<menuitem-iconic >
				<image src="images/comment.png"/>
				<label value="Comments"/> 						
			</menuitem-iconic>	
		</menuitem>
		<menuitem oncommand="getthetree().standardPolls('myPropertyTree',server,'[Property]');" flex="1">
			<menuitem-iconic >
				<image src="images/istogramma.png"/>
				<label value="Vote"/> 						
			</menuitem-iconic>	
		</menuitem>
		<!--<menuitem id="popupFreeze" oncommand="freezeprop();" flex="1">
			<menuitem-iconic >
				<image src="images/snow.png"/>
				<label value="Freeze"/> 						
			</menuitem-iconic>	
		</menuitem>-->
	</popup>
</popupset>
<tree hidecolumnpicker="true" id="myPropertyTree" flex="1" context="clipmenu"
ondraggesture="treeDragGesture(event)" ondragenter="treeDragEnter(event)" 
ondragover="return DragOverContentArea(event);" ondragexit="treeDragExit(event)" 
ondragdrop="treeDragDrop(event);">
<treecols width="1200">
  <treecol id="category"  label= "Property" primary="true" flex="1">
   </treecol>
  		</treecols>
 	<treechildren id="22">
 		</treechildren>
	
</tree>
</vbox>
</hbox>
<splitter orient ="vertical" state="open" collapse="after"
				resizeafter="closest"
				resizebefore="farthest">
				</splitter>
<hbox flex="0">
	<vbox flex="0">
	<textbox value="Enter query..." id="ontosearch"
				onfocus="this.style.color='red'; this.value='';"
				onblur="this.style.color='black'; this.value='Search element...';"
				onkeypress="if(event.keyCode == 13){OntologySearch.searchProperty(this.value)}" />
				</vbox>
			</hbox>
			
			
<script type="application/x-javascript">	
	<![CDATA[
	
		
		var userType = readUserType();
		if(userType=="Simple User"){
			document.getElementById("createObjectProperty").hidden=true;
			document.getElementById("createDatatypeProperty").hidden=true;
		//	document.getElementById("Freeze").hidden=true;
			document.getElementById("createAnnotationProperty").hidden=true;
			document.getElementById("createSubProperty").hidden=true;
			document.getElementById("removeProperty").hidden=true;
			document.getElementById("popupCreateSubProperty").disabled=true;
			document.getElementById("popupModifyName").disabled=true;
			document.getElementById("popupRemoveItem").disabled=true;
			document.getElementById("popupAddSynonym").disabled=true;
		//	document.getElementById("popupFreeze").disabled=true;
		}
		
	]]>
</script>
</window>
