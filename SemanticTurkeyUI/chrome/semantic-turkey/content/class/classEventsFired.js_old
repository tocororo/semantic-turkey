/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 * 
 * The Original Code is SemanticTurkey.
 * 
 * The Initial Developer of the Original Code is University of Roma Tor Vergata.
 * Portions created by University of Roma Tor Vergata are Copyright (C) 2007.
 * All Rights Reserved.
 * 
 * SemanticTurkey was developed by the Artificial Intelligence Research Group
 * (art.uniroma2.it) at the University of Roma Tor Vergata (ART) Current
 * information about SemanticTurkey can be obtained at
 * http://semanticturkey.uniroma2.it
 * 
 */

Components.utils.import("resource://stmodules/Logger.jsm");  // debug

if (typeof art_semanticturkey == 'undefined')
	var art_semanticturkey = {};


	
art_semanticturkey.eventListenerArrayObject = null;

/*
art_semanticturkey.eventListenerClassArray = new Array();
art_semanticturkey.addEventListenerToArrayAndRegister = function(eventId, listener){
	if (art_semanticturkey.eventListenerClassArray[eventId] == undefined) {
		art_semanticturkey.eventListenerClassArray[eventId] = new Array();
	}
	art_semanticturkey.evtMgr.registerForEvent(eventId, listener);
	art_semanticturkey.eventListenerClassArray[eventId].push(listener);
};

art_semanticturkey.removedAllEventsFiredByServer = function(){
	for ( var id in art_semanticturkey.eventListenerClassArray) {
		for(var i=0; i<art_semanticturkey.eventListenerClassArray[id].length; ++i){
			art_semanticturkey.evtMgr.deregisterForEvent(id, art_semanticturkey.eventListenerClassArray[id][i]);
		}
	}
};*/

	
art_semanticturkey.associateEventsFiredByServer = function(){
	art_semanticturkey.eventListenerArrayObject = new art_semanticturkey.eventListenerArrayClass();
	//register the handler for the events
	//var st_visLevelObj = new art_semanticturkey.eventListener("visLevelChanged", art_semanticturkey.createSTVisLevEventFunct, null); 
	//art_semanticturkey.addEventListenerToArrayAndRegister("visLevelChanged", st_visLevelObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("visLevelChanged", art_semanticturkey.createSTVisLevEventFunct, null);
	
	//var st_closedProjectObj = new art_semanticturkey.eventListener("projectClosed", art_semanticturkey.createSTClosedProjectFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("projectClosed", st_closedProjectObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("projectClosed", art_semanticturkey.createSTClosedProjectFunct, null);
	
	//var st_rdfLoadedObj = new art_semanticturkey.eventListener("rdfLoaded", art_semanticturkey.rdfLoadedFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("rdfLoaded", st_rdfLoadedObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("rdfLoaded", art_semanticturkey.rdfLoadedFunct, null);
	
	//var st_clearedDataObj = new art_semanticturkey.eventListener("clearedData", art_semanticturkey.clearedDataFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("clearedData", st_clearedDataObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("clearedData", art_semanticturkey.clearedDataFunct, null);
	
	//remove class event
	//var st_removeClassObj = new art_semanticturkey.eventListener("removedClass", art_semanticturkey.removeClassFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("removedClass", st_removeClassObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("removedClass", art_semanticturkey.removeClassFunct, null);
	
	//create (sub)class event, this is used only when a new class is created
	//var st_createdSubClassObj = new art_semanticturkey.eventListener("createdSubClass", art_semanticturkey.createdSubClassFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("createdSubClass", st_createdSubClassObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("createdSubClass", art_semanticturkey.createdSubClassFunct, null);
	
	//addSubclass event, this is NOT used when a new class is created
	//var st_subClsOfRemovedObj = new art_semanticturkey.eventListener("subClsOfAddedClass", art_semanticturkey.subClsOfAddedFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("subClsOfAddedClass", st_subClsOfRemovedObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("subClsOfAddedClass", art_semanticturkey.subClsOfAddedFunct, null);
	
	//removeSubclass event
	//var st_subClsOfAddedObj = new art_semanticturkey.eventListener("subClsOfRemovedClass", art_semanticturkey.subClsOfRemovedFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("subClsOfRemovedClass", st_subClsOfAddedObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("subClsOfRemovedClass", art_semanticturkey.subClsOfRemovedFunct, null);
		
	//remove superclass event ???
	//var st_removedSuperClassObj = new art_semanticturkey.eventListener("removedSuperClass", art_semanticturkey.removedSuperClassFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("removedSuperClass", st_removedSuperClassObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("removedSuperClass", art_semanticturkey.removedSuperClassFunct, null);
	
	//renamed class event
	//var st_renamedClassObj = new art_semanticturkey.eventListener("renamedClass", art_semanticturkey.renamedClassFunct, null);
	//art_semanticturkey.addEventListenerToArrayAndRegister("renamedClass", st_renamedClassObj);
	art_semanticturkey.eventListenerArrayObject.addEventListenerToArrayAndRegister("renamedClass", art_semanticturkey.renamedClassFunct, null);
	
};


art_semanticturkey.removeClassFunct = function(eventId, classRemovedObj){
	var removedClassName = classRemovedObj.getClassName();
	var tree = document.getElementById("classesTree");
	var childList = tree.getElementsByTagName("treeitem");
	for (var i = 0; i < childList.length; i++) {
		art_semanticturkey.checkAndRemove(removedClassName, childList[i]);
	}
};

art_semanticturkey.subClsOfRemovedFunct = function(eventId, subClsOfRemovedObj){
	var count = 0;
	var className = subClsOfRemovedObj.getClassName();
	var superClassName = subClsOfRemovedObj.getSuperClassName();
	var tree = document.getElementById("classesTree");
	var childList = tree.getElementsByTagName("treeitem");
	for (var i = 0; i < childList.length; i++) {
		if(className == childList[i].getAttribute("className") )
			count++;
		var parentNode = childList[i].parentNode.parentNode;
		if(parentNode.getAttribute("className") == superClassName)
			art_semanticturkey.checkAndRemove(className, childList[i]);
	}
	if(count == 1){
		//TODO add the class as a subclass of owl:Thing with all its characteristics (take this feature from the only class which was removed)
	}
};

/**
 * @author Noemi Andrea check all occurence of class that should be removed
 */
art_semanticturkey.checkAndRemove = function(removedClassName, node) {
	var className = node.getAttribute("className");
	if (className == removedClassName) {
		var parentNode = node.parentNode;
		parentNode.removeChild(node);
		if (parentNode.childNodes.length == 0) {
			parentNode.parentNode.setAttribute("container", false);
			parentNode.parentNode.removeChild(parentNode);
		}
	}
};

art_semanticturkey.createdSubClassFunct = function(eventId, classAddedObj){
	var className = classAddedObj.getClassName();
	var superClassName = classAddedObj.getSuperClassName();
	var tree = document.getElementById("classesTree");
	var childList = tree.getElementsByTagName("treeitem");
	for (var i = 0; i < childList.length; i++) {
		art_semanticturkey.checkAndCreate(className, childList[i],
				superClassName);
	}
};

art_semanticturkey.subClsOfAddedFunct  = function(eventId, subClsOfAddedObj){
	var className = subClsOfAddedObj.getClassName();
	var superClassName = subClsOfAddedObj.getSuperClassName();
	var numInst = subClsOfAddedObj.getNumInst();
	var delForbidden = subClsOfAddedObj.getDelFobidden();
	var tree = document.getElementById("classesTree");
	var childList = tree.getElementsByTagName("treeitem");
	for (var i = 0; i < childList.length; i++) {
		art_semanticturkey.checkAndCreate(className, childList[i],
				superClassName, numInst);
	}
};

art_semanticturkey.checkAndCreate = function(className, parentNode,
		superClassName, numInst, delForbidden) {
	var parentClassName = parentNode.getAttribute("className");
	if (parentClassName == superClassName) {
		var parentTreeChildren = parentNode
				.getElementsByTagName("treechildren")[0];
		if (parentTreeChildren == null) {
			parentTreeChildren = document.createElement("treechildren");
			parentNode.appendChild(parentTreeChildren);
			parentNode.setAttribute("container", true);
			parentNode.setAttribute("open", true);
		}
		var tr = document.createElement("treerow");
		var tc = document.createElement("treecell");
		if(numInst == undefined){
			tc.setAttribute("numInst", "0");
			tc.setAttribute("deleteForbidden", false);
		}
		else{
			tc.setAttribute("numInst", numInst);
			tc.setAttribute("deleteForbidden", delForbidden);
		}
		
		tc.setAttribute("isRootNode", false);
		if(numInst == undefined || numInst == 0){
			tc.setAttribute("label", className);
		}
		else{
			tc.setAttribute("label", className+"("+numInst+")");
		}
		tr.appendChild(tc);
		var ti = document.createElement("treeitem");
		ti.setAttribute("className", className);
		ti.appendChild(tr);
		parentTreeChildren.appendChild(ti);
	}
};

art_semanticturkey.renamedClassFunct = function(eventId, classRenamedObj){
	var newClassName = classRenamedObj.getNewClassName();
	var oldClassName = classRenamedObj.getOldClassName();
	
	var tree = document.getElementById("classesTree");
	var childList = tree.getElementsByTagName("treeitem");
	for (var i = 0; i < childList.length; i++) {
		art_semanticturkey.checkAndRename(newClassName, oldClassName,
				childList[i]);
	}
};

art_semanticturkey.checkAndRename = function(newClassName, oldClassName, node) {
	var className = node.getAttribute("className");
	if (className == oldClassName) {
		var parentNode = node.parentNode;
		node.setAttribute("className", newClassName);
		var numInst = node.getElementsByTagName("treecell")[0]
				.getAttribute("numInst");
		var newLabel = "";
		if (numInst > 0)
			newLabel = newClassName + "(" + numInst + ")";
		else
			newLabel = newClassName;
		node.getElementsByTagName("treecell")[0]
				.setAttribute("label", newLabel);
	}
};


/*
art_semanticturkey.createSTClosedProjectObj = function() {
	this.fireEvent = function(eventId, closedProjectInfo) {
		var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIWebNavigation)
                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                   .rootTreeItem
                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIDOMWindow); 
        mainWindow.toggleSidebar();
    };

	this.unregister = function() {
		art_semanticturkey.evtMgr.deregisterForEvent("projectClosed", this);
	};
};*/

art_semanticturkey.createSTClosedProjectFunct = function(eventId, closedProjectInfo){
	var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIWebNavigation)
                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                   .rootTreeItem
                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIDOMWindow); 
    mainWindow.toggleSidebar();
};

/*
art_semanticturkey.createSTVisualizationLevelObj = function(){
	this.fireEvent = function(eventId, visualizationLevel) {
		var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIWebNavigation)
                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                   .rootTreeItem
                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIDOMWindow); 
        mainWindow.toggleSidebar();
	};

	this.unregister = function() {
		art_semanticturkey.evtMgr.deregisterForEvent("visLevelChanged", this);
	};
};*/

art_semanticturkey.createSTVisLevEventFunct = function(eventId, visualizationLevel){
	var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIWebNavigation)
                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                   .rootTreeItem
                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIDOMWindow); 
    mainWindow.toggleSidebar();
};

/*
art_semanticturkey.rdfLoadedObj = function(){
	this.fireEvent = function(eventId, rdfLoaded) {
		var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIWebNavigation)
                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                   .rootTreeItem
                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIDOMWindow); 
        mainWindow.toggleSidebar();
	};

	this.unregister = function() {
		art_semanticturkey.evtMgr.deregisterForEvent("rdfLoaded", this);
	};
};*/

art_semanticturkey.rdfLoadedFunct = function(eventId, rdfLoaded){
	var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIWebNavigation)
                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                   .rootTreeItem
                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                   .getInterface(Components.interfaces.nsIDOMWindow); 
    mainWindow.toggleSidebar();
};

/*
art_semanticturkey.clearedDataObj = function(){
	this.fireEvent = function(eventId, clearedData) {
		var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
               .getInterface(Components.interfaces.nsIWebNavigation)
               .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
               .rootTreeItem
               .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
               .getInterface(Components.interfaces.nsIDOMWindow); 
    	mainWindow.toggleSidebar();
	};

	this.unregister = function() {
		art_semanticturkey.evtMgr.deregisterForEvent("clearedData", this);
	};
};*/

art_semanticturkey.clearedDataFunct = function(eventId, clearedData){
	var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
               .getInterface(Components.interfaces.nsIWebNavigation)
               .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
               .rootTreeItem
               .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
               .getInterface(Components.interfaces.nsIDOMWindow); 
	mainWindow.toggleSidebar();
};

