<?xml version="1.0"?>
<!--  /*
  * The contents of this file are subject to the Mozilla Public License
  * Version 1.1 (the "License");  you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an "AS IS" basis,
  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  * the specific language governing rights and limitations under the License.
  *
  * The Original Code is SemanticTurkey.
  *
  * The Initial Developer of the Original Code is University of Roma Tor Vergata.
  * Portions created by University of Roma Tor Vergata are Copyright (C) 2007.
  * All Rights Reserved.
  *
  * SemanticTurkey was developed by the Artificial Intelligence Research Group
  * (art.uniroma2.it) at the University of Roma Tor Vergata (ART)
  * Current information about SemanticTurkey can be obtained at 
  * http://semanticturkey.uniroma2.it
  *
  */ -->

<bindings id="treeBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 <binding id="mytree" extends="chrome://global/content/bindings/tree.xml#tree">
    <content>
      <children includes="treecols"/>
      <xul:stack flex="1">
        <xul:treerows class="tree-rows" flex="1">
          <children/>
        </xul:treerows>
      </xul:stack>
    </content>
    <implementation>
      <field name="itemid">5</field>
      <field name="rowid">5</field>
      <field name="treechildrenid">0</field>
      <field name="cnt">0</field>

      <method name="getparentid">
        <parameter name="tree"/>
        <parameter name="currentindex"/>
        <body>
        <![CDATA[
			var currentlevel = tree.treeBoxObject.view.getLevel(currentindex);
			var variantlevel = currentlevel
			if (currentlevel > 0)
			{
 				while (tree.treeBoxObject.view.getLevel(currentindex) == currentlevel && currentindex >= 0)
				{
					currentindex--;
				}
				if (tree.treeBoxObject.view.getLevel(currentindex)==currentlevel-1) 
					return tree.treeBoxObject.view.getItemAtIndex(currentindex).getAttribute("id");
			}
        ]]>
        </body>
      </method>
	<!-- NScarpato 22/05/2007 Metodo per ricavare l'elemento della'albero dalla label -->
		<method name="selectElementClass">
        <parameter name="tree"/>
        <parameter name="findName"/>
        <body>
        <![CDATA[
		var index = 0;
		while (tree.treeBoxObject.view.getItemAtIndex(index)!=null)
		{
			var current = tree.treeBoxObject.view.getItemAtIndex(index);
			var treerow = current.getElementsByTagName('treerow')[0];
	    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	
			var label=treecell.getAttribute("label");
			if(label.indexOf('(')>-1){
				label=label.substring(0, label.indexOf('('));
			}
			if(label==findName){
				tree.view.selection.clearSelection();
				tree.view.selection.toggleSelect(index);
				tree.boxObject.scrollToRow(index);
				return;
			}
			index++;
		}
		]]>
        </body>
      </method>
      <method name="CategoriesToPopup">
        <parameter name="tree"/>
        <parameter name="menuname"/>
        <body>
        <![CDATA[
			var index = 0;
			while (tree.treeBoxObject.view.getItemAtIndex(index)!=null)
			{
				var current = tree.treeBoxObject.view.getItemAtIndex(index);
				var parent_tree = current.parentNode;
				
				var parentid = this.getparentid(tree,index);
				if (parentid==null) parentid = "categorytreechildren";
				var parent_menu = document.getElementById(menuname + parentid);
			
				var cellcontent = tree.treeBoxObject.view.getCellText(index,'category');
										
				if (current.getAttribute("container","true"))
				{
					var menu = document.createElement("menu");
					menu.setAttribute("label",cellcontent);
					var mpopup = document.createElement("menupopup");
					mpopup.setAttribute("id", menuname + current.getAttribute("id"));
					menu.appendChild(mpopup);
					parent_menu.appendChild(menu);
				}
				else
				{
					var mi = document.createElement("menuitem");
                    mi.setAttribute("label",cellcontent);
                    parent_menu.appendChild(mi);
				}
				index++;
			}
        ]]>
        </body>
      </method>

      <method name="deleteCategoriesFromPopup">
        <parameter name="tree"/>
        <parameter name="menuname"/>
        <body>
        <![CDATA[
			var firstitem = document.getElementById(menuname + "categorytreechildren").firstChild;
			document.getElementById(menuname + "categorytreechildren").removeChild(firstitem);
			this.cnt = 0;
        ]]>
        </body>
      </method>

      <method name="BuildPopups">
        <body>
        <![CDATA[
			getthetree().deleteCategoriesFromPopup(getthetree(),'copyto_');
			getthetree().CategoriesToPopup(getthetree(),'copyto_');
        ]]>
        </body>
      </method>

      <method name="RenameCurrent">
        <parameter name="treename"/>
        <parameter name="cellname"/>
        <body>
        <![CDATA[
			var tree = document.getElementById(treename);
			var currentitem = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
			var currentlabel = tree.treeBoxObject.view.getCellText(tree.currentIndex,cellname);
			var newlabel = prompt("Please enter the new categoryname",currentlabel);

			if (newlabel!=false) {
				var currentcell = document.getElementById("cell-of-" + currentitem.getAttribute("id"));
				currentcell.setAttribute("label",newlabel);
			}
			this.BuildPopups();
        ]]>
        </body>
      </method>

      <method name="DeleteCurrent">
        <parameter name="treename"/>
        <body>
        <![CDATA[
			if (confirm("Are you sure you want to delete this category?")==true) {
				var tree = document.getElementById(treename);
				var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
				currentelement.parentNode.removeChild(currentelement);
			}
        ]]>
        </body>
      </method>

      <method name="CreateSubTree">
        <parameter name="treeid"/>
        <parameter name="content"/>
        <body>
        <![CDATA[				
			var tree = document.getElementById(treeid);
			var currentitem = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
			alert("currentIndex: " + tree.currentIndex);
			var currentid = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).getAttribute("id");			
			if (currentid != ""){ 
				content = prompt('Please enter a categoryname','undefined');
				var parentid = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).parentNode.getAttribute("id");
				var parent = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).parentNode;
				// create Treerow with id (rowid is a global variable so that we do not use the same id twice)
				var tr = document.createElement("treerow");
				tr.setAttribute("id", "treerow" + this.rowid);
				var tc = document.createElement("treecell");
				tc.setAttribute("label", content);
				tc.setAttribute("id","cell-of-treeitem" + this.itemid);
				tr.appendChild(tc);
				this.rowid++;
				// create treeitem with id (itemid is a global variable so that we do not use the same id twice)
				var ti = document.createElement("treeitem");
				ti.setAttribute("id", "treeitem" + this.itemid);
				ti.appendChild(tr);
				this.itemid++;
				// we distinguish the case that
				//		the container of the item is empty --> create new treechildren object and append item
				//		a treechildren-object already exists --> get the id and append new item to this one
				if (currentitem.getAttribute("container") != "true") {
					currentitem.setAttribute("container", "true");
					var tch = document.createElement("treechildren");
					tch.setAttribute("id", "treechildren" + this.treechildrenid);
					tch.appendChild(ti);
					this.treechildrenid++;
					currentitem.appendChild(tch);
				} else {
					var existingtreechildren = document.getElementById(currentitem.childNodes.item(0).getAttribute("id"));
					existingtreechildren.appendChild(ti);
				}
				// set open status of the item
				currentitem.setAttribute("open", "true");
			}
        ]]>
        </body>
      </method>

      <method name="topcategory">
        <parameter name="childrenobject"/>
        <parameter name="content"/>
        <body>
        <![CDATA[
			thetree = document.getElementById(childrenobject);
			var tr = document.createElement("treerow");
			tr.setAttribute("id", "treerow" + this.rowid);
			this.rowid++;
			var tc = document.createElement("treecell");
			tc.setAttribute("label", content);
			tc.setAttribute("id","cell-of-treeitem" + this.itemid);
			tr.appendChild(tc);
			this.rowid++;
			var ti = document.createElement("treeitem");
			ti.setAttribute("id", "treeitem" + this.itemid);
			ti.appendChild(tr);
			this.itemid++;
			thetree.appendChild(ti);
        ]]>
        </body>
      </method>

      <method name="Move">
        <parameter name="treename"/>
        <parameter name="direction"/>
        <parameter name="event"/>
        <body>
        <![CDATA[
			var tree = document.getElementById(treename);
			var idx = tree.currentIndex;
			var dir = 1;
			if (direction == "up") {
				dir = -1;
			}	
			var currentitem = tree.treeBoxObject.view.getItemAtIndex(idx);
			var previousitem = tree.treeBoxObject.view.getItemAtIndex(idx + dir);
			var parent = currentitem.parentNode;

			if (direction == "up") {
				if (previousitem.parentNode == currentitem.parentNode) {
					parent.insertBefore(currentitem, previousitem);
				} else {
					var tmp = previousitem.parentNode.parentNode;
					var ourobj = tmp;
					while (tmp.id != "outlineTree") {
						tmp = tmp.parentNode;
						if (currentitem.parentNode == tmp.parentNode) {
							ourobj = tmp;
						}
					}					
					parent.insertBefore(currentitem, ourobj);
				}
			} else {
				if (previousitem.parentNode == currentitem.parentNode) {
					parent.insertBefore(previousitem, currentitem);
				} else {
					var previousitem = tree.treeBoxObject.view.getItemAtIndex(idx + dir + 1);
					var i = 1;
					var ourobj;
					while (previousitem && ( previousitem.parentNode != currentitem.parentNode ) ) {
						i++;
						previousitem = tree.treeBoxObject.view.getItemAtIndex(idx + dir + i);	
					}
					if (previousitem) {
						parent.insertBefore(previousitem, currentitem);
					}
					
				}
			
			}
        ]]>
        </body>
      </method>

      <method name="getCellNodeAt">
        <parameter name="row"/>
        <parameter name="col"/>
        <body>
          var view;
          try {
            view = this.contentView;
          } catch (ex){}
          if (view){
            var elem = view.getItemAtIndex(row);
            if (elem){
              var pos = ((document.getElementById(col).ordinal - 1) >> 1);
              return elem.firstChild.childNodes[pos];
            }
          }
          return null;
        </body>
      </method>
 <!--NScarpato 04/03/2007 aggiunto metodo per creare istanze -->
  <method name="createInstance">
      	<parameter name="treename"/>
	<body>
	<![CDATA[      		
		var tree = document.getElementById(treename); //prende in ingresso l'albero attraverso il suo Id, in realtà so già qual'è (dubbia utilità della variabile treename)
	    var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	    						
		var parameters = new Object();
		parameters.name = treecell.getAttribute("label");		
		parameters.tree = tree;	
		//NScarpato 21/05/2007 risolto problema aggiornamento lista dopo createInstance
		parameters.list=gettheList();			
		window.openDialog("chrome://semantic-turkey/content/createInstance.xul","_blank","modal=yes,resizable,centerscreen", parameters);
	]]>
	</body>
      </method>     
 <!--NScarpato 09/02/2007 aggiunto delete  per lista istanze--> 
  <method name="DeleteInstance">
	<body>
	<![CDATA[
		var list = gettheList();
		var windowManager = Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator);
    	var topWindowOfType = windowManager.getMostRecentWindow("navigator:browser");
        var tabWin = topWindowOfType.gBrowser.selectedBrowser.currentURI.spec;	    	    
	   	var instanceName = list.selectedItem.label;	
   	    var instIndex = list.selectedIndex;
   	    numTotInst = list.getElementsByTagName('listheader')[0].getAttribute("numTotInst");
   	    var parameters = new Object();
		parameters.list = list;		
		parameters.tree = getthetree();	
		parameters.instName = instanceName;	
	    parameters.instIndex = instIndex;
	    parameters.numTotInst=numTotInst;
	    parameters.deleteType="delete";
	    httpGetP("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=delete&name=" + encodeURIComponent(instanceName)+"&type=Instance",false,parameters);
	]]>
	</body>
      </method>    
 
  <method name="DeepDeleteInstance">
	<body>
	<![CDATA[
		var list = gettheList();
		var windowManager = Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator);
    	var topWindowOfType = windowManager.getMostRecentWindow("navigator:browser");
        var tabWin = topWindowOfType.gBrowser.selectedBrowser.currentURI.spec;	    	    
	   	var instanceName = list.selectedItem.label;	
   	    var instIndex = list.selectedIndex;
   	    numTotInst = list.getElementsByTagName('listheader')[0].getAttribute("numTotInst");
   	    var parameters = new Object();
		parameters.list = list;		
		parameters.tree = getthetree();	
		parameters.instName = instanceName;	
	    parameters.instIndex = instIndex;
	    parameters.numTotInst=numTotInst;
	    parameters.deleteType="deepDelete";
	    httpGetP("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=delete&request=deepDelete&name=" + encodeURIComponent(instanceName)+"&type=Instance",false,parameters);
	   ]]>
	</body>
      <!--NScarpato 12/07/2007 aggiunto deep delete  per lista istanze--></method>   
      <method name="WebLinks">        
				<parameter name="listname" />
				<body>
					<![CDATA[			
	    var list = document.getElementById('InstancesList');
	    var windowManager = Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator);
    	var topWindowOfType = windowManager.getMostRecentWindow("navigator:browser");
        var tabWin = topWindowOfType.gBrowser.selectedBrowser.currentURI.spec;	    	    
	    var instanceName = list.selectedItem.label;
	    //NScarpato passaggio da xsl a xul	   
	   var parameters = new Object();
		parameters.instanceName = instanceName;
		window.openDialog("chrome://semantic-turkey/content/urlPage.xul","_blank","modal=yes,resizable,centerscreen", parameters);			
	 	//window.content.document.location.href = "chrome://semantic-turkey/content/urlPage.xul?instanceName="+instanceName;
	  //window.content.document.location.href = "http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=page&instanceName=" + instanceName;	    			    
           ]]>
				</body>
			</method>
      <!-- NScarpato 19/10/2007 add function to show graph strated by a class/instance -->
       <method name="PartialSemanticNavigation">       
	<body>
           <![CDATA[	
      
          var tree = document.getElementById('outlineTree');
		if (tree.currentIndex == null) {
	    		alert("Please Select a Class");
	    		return;
	    	}
	    var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0];
    	var className = treecell.getAttribute("label");  	    	    
	    httpGet("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=graph&clsQName="+encodeURIComponent(className), false);	    
	   	window.content.document.location.href = "http://127.0.0.1:1979/semantic_turkey/resources/graph/Proxy?URL=http://127.0.0.1:1979/semantic_turkey/resources/applet/TGLinkBrowser.html";   
	   
           ]]>
	</body>
      </method>
      <method name="SemanticNavigation">       
	<body>
           <![CDATA[	
       /*    
          var tree = document.getElementById('outlineTree');
		if (tree.currentIndex == null) {
	    		alert("Please Select a Class");
	    		return;
	    	}
	    var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0];
    	var className = treecell.getAttribute("label");  	    	    
	    httpGet("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=graph&clsQName="+className, false);	    
	   */
	   
	    
	    httpGet("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=graph", false);
		
		
		window.content.document.location.href = "http://127.0.0.1:1979/semantic_turkey/resources/graph/Proxy?URL=http://127.0.0.1:1979/semantic_turkey/resources/applet/TGLinkBrowser.html";   
	   
	   /*NScarpato visualizzare il grafico in una finestra a parte 
	   window.openDialog("http://127.0.0.1:1979/semantic_turkey/resources/graph/Proxy?URL=http://127.0.0.1:1979/semantic_turkey/resources/applet/TGLinkBrowser.html","_blank","modal=yes,resizable,centerscreen");
	   */
	  
	   // window.openUILink("http://127.0.0.1:1979/semantic_turkey/resources/graph/Proxy?URL=http://127.0.0.1:1979/semantic_turkey/resources/applet/TGLinkBrowser.html",ev,false,true);	    			    
           ]]>
	</body>
      </method>
      
      <method name="CreateClass">
      	<parameter name="treename"/>
	<body>
	<![CDATA[
		try{
			var tree = document.getElementById(treename);
			var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		}
		catch(e){
	    	alert("Please Select a Class");
	    	return;
	    }
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	    
		if (treecell.getAttribute('properties') == "instance") {
	    		alert("This is not a class!");
	    		return;
	    	}
		var iconicName = treecell.getAttribute("label");
		//NScarpato aggiunta form xul per create class
		var parameters = new Object();
		parameters.iconicName = iconicName;		
		parameters.tree = tree;		
		parameters.parentTreecell= treecell;
		parameters.isRootNode="false";//create a subclass node		
		parameters.type="subClass";
		window.openDialog("chrome://semantic-turkey/content/createClass.xul","_blank","modal=yes,resizable,centerscreen", parameters);
		
	]]>
	</body>
      <!--NScarpato 21/01/2007 modificata funzionalità per lista istanze--></method>
      <!-- Nscarpato 10/02/2007 Create Sibling Class -->
      <method name="CreateSiblingClass">
      	<parameter name="treename"/>
	<body>
	<![CDATA[
		try{
			var tree = document.getElementById(treename);
			var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		}
		catch(e){
	    	alert("Please Select a Class");
	    	return;
	    }
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	    
		if (treecell.getAttribute('properties') == "instance") {
	    		alert("This is not a class!");
	    		return;
	    	}
	    var isRootNode = treecell.getAttribute('isRootNode');
		var name = treecell.getAttribute("label");
		//NScarpato 26/06/2007 remove ParentName attribute  
		//var parentName = treecell.getAttribute("parentName");	
		var parent = currentelement.parentNode.parentNode;
				parentcell=parent.getElementsByTagName('treecell')[0];
				var parentLabel = parentcell.getAttribute("label");
				if(parentLabel.indexOf('(')>-1){
					parentLabel=parentLabel.substring(0, parentLabel.indexOf('('));
				}
		var parameters = new Object();
		parameters.iconicName =  parentLabel;		
		parameters.tree = tree;		
		parameters.parentTreecell= treecell;
		parameters.isRootNode=isRootNode;
		parameters.type="siblingClass";
		window.openDialog("chrome://semantic-turkey/content/createClass.xul","_blank","modal=yes,resizable,centerscreen", parameters);
	]]>
	</body>
      </method>
     
      <!-- END  Nscarpato 10/02/2007 Create Sibling Class -->
      
      <method name="Delete">
      	<parameter name="treename"/>
	<body>
	<![CDATA[
		try{
			var tree = document.getElementById(treename);
			var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		}
		catch(e){
	    	alert("Please Select a Class");
	    	return;
	    }
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	    
		var treechildren = currentelement.getElementsByTagName('treechildren')[0];
		var parameters = new Object();
		parameters.tree = document.getElementById('outlineTree');	
		var name = treecell.getAttribute("label");
		parameters.currentelement=currentelement;
		parameters.name = name;
		//NScarpato 26/06/2007 remove ParentName attribute  
				var parent = currentelement.parentNode.parentNode.parentNode.parentNode;
				parameters.parent=parent;
				parentcell=parent.getElementsByTagName('treecell')[0];
				var parentLabel = parentcell.getAttribute("label");
				if(parentLabel.indexOf('(')>-1){
					parentLabel=parentLabel.substring(0, parentLabel.indexOf('('));
				}
		parameters.parentIconicName=parentLabel;
		if (treechildren == null) {
			var deleteForbidden=treecell.getAttribute("deleteForbidden");
			if(deleteForbidden=="true"){
				//NScarpato 26/03/2008 add enabled option for delete
				alert("You cannot delete this class, it's a class that belongs to the top ontology!");
			//NScarpato 17/05/207 add control on delete 			
			}else if(name.indexOf('(')>-1){		
					//NON USARE MAI CHECK DI QUESTO TIPO. Supponi che qualcuno cambi il codice per dire che una classe possa mostrare o meno le parentesi, a questo punto non funzionerebbe più nulla! controlla il numero di istanze, oppure usa anche questo check, ma wrappalo con un check che possa essere cambiato esplicitamente!
					alert("You cannot delete this class because it has instances"); 
			}else{
				httpGetP("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=delete&name=" + encodeURIComponent(name)+"&type=Class",false,parameters);	
			}
			return;
		}
		//STARRED mi spieghi questo else, che differenza c'è tra i due?
		else{			
			var treeitemVect = treechildren.getElementsByTagName('treeitem');				
			if (treeitemVect.length == 0) {				
				var deleteForbidden=treecell.getAttribute("deleteForbidden");
			 	if(deleteForbidden=="true"){
					alert("You cannot delete this class, it's a class that belongs to the top ontology!");
				}else if(name.indexOf('(')>-1){
					alert("You cannot delete this class because it has instances");
				}else{
					httpGetP("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=delete&name=" + encodeURIComponent(name)+"&type=Class",false,parameters);	
				}
				return;
			}else {
				var deleteForbidden=treecell.getAttribute("deleteForbidden");
				if(deleteForbidden=="true"){
					alert("You cannot delete this class, it's a class that belongs to the top ontology!");
				}else{
					alert("You cannot delete this class because it has subClasses!");	    				
				}
			return;
			}
		}		
	]]>
	</body>
      </method>
      
      <method name="ModifyName">
      	<parameter name="treename"/>
	<body>
	<![CDATA[      		
		var tree = document.getElementById(treename);
	    var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	    						
		var parameters = new Object();
		var modify =treecell.getAttribute("deleteForbidden");
		if(modify=="false"){
			var name = treecell.getAttribute("label");		
			if(name.indexOf('(')>-1){
	       			name=name.substring(0, name.indexOf('('));
	       	}
	       	parameters.name = name;
			parameters.numInst = treecell.getAttribute("numInst");
			parameters.tree = tree;			
			window.openDialog("chrome://semantic-turkey/content/modifyName.xul", "showmore", "chrome",parameters);
		}else{
			alert("You cannot modify this class, it's a class that belongs to the top ontology!");
		}
	]]>
	</body>
      </method>
	<method name="AddSynonym">
      	<parameter name="treename"/>
	<body>
	<![CDATA[      		
		var tree = document.getElementById(treename);
	    	var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
		var treerow = currentelement.getElementsByTagName('treerow')[0];
    	    	var treecell = treerow.getElementsByTagName('treecell')[0]; 	    		
		if (treecell.getAttribute('properties') == "instance") {
	    		alert("You cannot add a synonym to an instance");
			return;
		}
		var parameters = new Object();
		parameters.name = treecell.getAttribute("label");				
		window.openDialog("chrome://semantic-turkey/content/synonym.xul","_blank","modal=yes,resizable,centerscreen", parameters);
	]]>
	</body>
      </method>	
			<!-- NScarpato-->  
		
		<method name="getInstancesProperty">
				<body>
					<![CDATA[
					var list = document.getElementById('InstancesList');
	    			var windowManager = Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator);
    				var topWindowOfType = windowManager.getMostRecentWindow("navigator:browser");
        			var tabWin = topWindowOfType.gBrowser.selectedBrowser.currentURI.spec;	    	    
	    			var parameters = new Object();
	    			parameters.subjectInstanceName = list.selectedItem.label;
					parameters.parentClsName = list.getElementsByTagName('listheader')[0].getAttribute("parentCls");  
					parameters.tree = list;
					window.openDialog("chrome://semantic-turkey/content/property.xul","_blank","modal=yes,resizable,centerscreen",parameters);   
               		]]>
				</body>
			</method>
				
		<!-- NScarpato  --><method name="createList">
			<parameter name="className" />
				<body>
					<![CDATA[
						httpGet("http://127.0.0.1:1979/semantic_turkey/resources/stserver/STServer?service=cls&clsName=" + encodeURIComponent(className), false);       		       	    
               		]]>
				</body>
			</method>
		</implementation>
			
		
		<handlers>
			<handler event="click" button="0">      	  
       	   var treeBox = this.treeBoxObject;
				var node = null;
            	var row = {};
            	var col = {};
            	var obj = {};
            	treeBox.getCellAt(event.clientX,event.clientY,row,col,obj);
            	var colid;
            	if (typeof col.value == "object") { // FireFox 1.5
                    colid = col.value.id;
            	} else { // FireFox 1.0
                    colid = col.value;
            	}
		    	 var cellnode = this.getCellNodeAt(row.value, colid); 	
		     	 this.createList(cellnode.getAttribute("label"));
		     		 
			</handler>
			<!-- NScarpato 26/03/2008 show or hidden contextmenu's items in particular the remove item and the modify name that's shown 
			only if the ontology it's root ontology showHideItemsList -->
			<handler event="click" button="2">	
      			tree=getthetree();		
				currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
				treerow = currentelement.getElementsByTagName('treerow')[0];	
				document.getElementById("removeItem").setAttribute("disabled", false);
				document.getElementById("modifyName").setAttribute("disabled", false);
				//NScarpato add function for mirror ontologies and download if is failed
				treecell=treerow.getElementsByTagName('treecell')[0];
				var deleteForbidden=treecell.getAttribute("deleteForbidden");
				if(deleteForbidden=="true"){	
					document.getElementById("removeItem").setAttribute("disabled", true);
					document.getElementById("modifyName").setAttribute("disabled", true);
				}
		</handler>
		<!-- NScarpato 24/02/2007 Aggiunto evento dblClick che apre pannello di Editing(editorPanel)-->	
		<handler event="dblclick" button="0">
       	   var treeBox = this.treeBoxObject;
				var node = null;
            	var row = {};
            	var col = {};
            	var obj = {};
            	treeBox.getCellAt(event.clientX,event.clientY,row,col,obj);
            	var colid;
            	if (typeof col.value == "object") { // FireFox 1.5
                    colid = col.value.id;
            	} else { // FireFox 1.0
                    colid = col.value;
            	}
		    	 var cellnode = this.getCellNodeAt(row.value, colid);
		    	var parameters = new Object();
	    	    parameters.sourceType = "Class";
	    	    parameters.sourceElement = cellnode;
	    	    parameters.sourceElementName = cellnode.getAttribute("label");	
	    	    parameters.numInst = cellnode.getAttribute("numInst");
				//NScarpato 14/03/2008 add deleteForbidden attribute  
				parameters.deleteForbidden=cellnode.getAttribute("deleteForbidden");
				//NScarpato 26/06/2007 remove ParentName attribute  
				var parent = cellnode.parentNode.parentNode.parentNode.parentNode;
				parentcell=parent.getElementsByTagName('treecell')[0];
				var parentLabel = parentcell.getAttribute("label");
				if(parentLabel.indexOf('(')>-1){
				parentLabel=parentLabel.substring(0, parentLabel.indexOf('('));
				}
				if(cellnode.getAttribute("isRootNode")=="false"){
	    	    	parameters.sourceParentElementName =parentLabel;
	    	    }else{
	    	    	parameters.sourceParentElementName ="owl:Thing";
	    	    }	
				parameters.list=document.getElementById('InstancesList');
	    		parameters.tree=document.getElementById('outlineTree');
				window.openDialog("chrome://semantic-turkey/content/editorPanel.xul","_blank","modal=yes,resizable,centerscreen",parameters);
			</handler>
		</handlers>
	</binding>
</bindings>

