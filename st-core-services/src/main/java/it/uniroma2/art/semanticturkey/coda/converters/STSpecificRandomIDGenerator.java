package it.uniroma2.art.semanticturkey.coda.converters;

import java.util.Collections;
import java.util.Map;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Value;
import org.springframework.beans.factory.annotation.Autowired;

import it.uniroma2.art.coda.converters.contracts.RandomIdGenerator;
import it.uniroma2.art.coda.exception.ConverterException;
import it.uniroma2.art.coda.interfaces.CODAContext;
import it.uniroma2.art.semanticturkey.plugin.extpts.URIGenerationException;
import it.uniroma2.art.semanticturkey.plugin.extpts.URIGenerator;
import it.uniroma2.art.semanticturkey.services.STServiceContext;

/**
 * A converter implementing the CODA contract {@link RandomIdGenerator} by using the generator bound to the
 * extension point {@link URIGenerator}. This converter allows PEARL specifications executed within Semantic
 * Turkey (e.g. as it happens in the context of custom ranges) to generate URIs that are consistent with the
 * ones generated by Semantic Turkey itself.
 *
 */
public class STSpecificRandomIDGenerator implements RandomIdGenerator {

	public static final String CONVERTER_URI = "http://semanticturkey.uniroma2.it/coda/converters/randIdGen";

	@Autowired
	private STServiceContext stServiceContext;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * it.uniroma2.art.coda.contracts.RandomIdGenerator#produceURI(it.uniroma2.art.coda.interfaces.CODAContext
	 * , java.lang.String, java.util.Map)
	 */
	@Override
	public IRI produceURI(CODAContext ctx, String value, String xRole, Map<String, Value> args)
			throws ConverterException {
		try {
			return stServiceContext.getProject().getURIGenerator().generateIRI(stServiceContext, xRole, args);
		} catch (URIGenerationException e) {
			throw new ConverterException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * it.uniroma2.art.coda.contracts.RandomIdGenerator#produceURI(it.uniroma2.art.coda.interfaces.CODAContext
	 * , java.lang.String, java.lang.String)
	 */
	@Override
	public IRI produceURI(CODAContext ctx, String value, String xRole) throws ConverterException {
		try {
			return stServiceContext.getProject().getURIGenerator().generateIRI(stServiceContext, xRole,
					Collections.<String, Value> emptyMap());
		} catch (URIGenerationException e) {
			throw new ConverterException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * it.uniroma2.art.coda.contracts.RandomIdGenerator#produceURI(it.uniroma2.art.coda.interfaces.CODAContext
	 * , java.lang.String)
	 */
	@Override
	public IRI produceURI(CODAContext ctx, String value) throws ConverterException {
		try {
			return stServiceContext.getProject().getURIGenerator().generateIRI(stServiceContext,
					"undetermined", Collections.<String, Value> emptyMap());
		} catch (URIGenerationException e) {
			throw new ConverterException(e);
		}
	}

}
