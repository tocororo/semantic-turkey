<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-3.1.xsd http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<mvc:annotation-driven conversion-service="conversionService" />
	<mvc:resources mapping="/WEB-INF/pages/**" location="/WEB-INF/pages/" />
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="it.uniroma2.art.semanticturkey.mvc.LegacyAndNewStyleServiceConnectioManagementHandlerInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<context:component-scan base-package="it.uniroma2.art.semanticturkey">
		<context:exclude-filter type="regex"
			expression="it\.uniroma2\.art\.semanticturkey\.customrange\..*" />
		<context:exclude-filter type="regex"
			expression="it\.uniroma2\.art\.semanticturkey\.customform\..*" />
		<context:exclude-filter type="regex"
			expression="it\.uniroma2\.art\.semanticturkey\.security\..*" />
	</context:component-scan>

	<!--A ValidatorFactory whose products (Validators) support dependency injection 
		on constraint validators, through the use of SpringConstraintValidatorFactory 
		for instantiating them. (See: http://stackoverflow.com/a/13361762) -->
	<bean id="validatorFactory"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".html" />
		<property name="order" value="1" />
	</bean>

	<bean id="stServiceAspect" class="it.uniroma2.art.semanticturkey.tx.STServiceAspect">
		<property name="order" value="100" />
	</bean>
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" order="200" />

	<bean id="transactionManager"
		class="it.uniroma2.art.semanticturkey.tx.RDF4JRepositoryTransactionManagerFactoryBean"
		scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>
	
	<bean
		class="it.uniroma2.art.semanticturkey.history.HistoryMetadataPostProcessor">
		<property name="proxyTargetClass" value="true"></property>
		<property name="order" value="250" />
	</bean>


	<bean
		class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
		<property name="proxyTargetClass" value="true"></property>
		<!-- Use explicitly the ValidatorFactory enabling dependency injection 
			on constraint validators -->
		<property name="validatorFactory" ref="validatorFactory"></property>
		<property name="order" value="300" />
	</bean>

	<!-- This enables Spring multipart handling by adding a multipart resolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
	<!-- <bean id="multipartResolver" -->
	<!-- class="org.springframework.web.multipart.support.StandardServletMultipartResolver"> -->
	<!-- </bean> -->
	<!-- Retrieves coda osgi factory -->

	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->

	<!-- Publishes the CODA converter that wraps the extension point URIGenerator -->
	<bean
		class="it.uniroma2.art.semanticturkey.coda.converters.STSpecificRandomIDGenerator"
		id="stSpecificRandomIDGenerator" />
	
	<!-- Enable @PreAuthorize and @PostAuthorize annotation for securing methods -->
	<security:global-method-security pre-post-annotations="enabled" />
</beans>