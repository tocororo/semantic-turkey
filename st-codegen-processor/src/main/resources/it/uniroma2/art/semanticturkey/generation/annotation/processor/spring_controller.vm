package ${generatedPackageName};

import ${packageName}.${classSimpleName};

import it.uniroma2.art.semanticturkey.mvc.IntrospectableController;
import it.uniroma2.art.semanticturkey.services.ServiceSpecies;
import it.uniroma2.art.semanticturkey.services.NewStyleService;
import it.uniroma2.art.semanticturkey.services.Response;
import it.uniroma2.art.semanticturkey.servlet.ServiceVocabulary.RepliesStatus;
import it.uniroma2.art.semanticturkey.servlet.ServletUtilities;
import it.uniroma2.art.semanticturkey.servlet.ServiceVocabulary.SerializationType;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Controller;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ${generatedClassSimpleName} 
    implements ApplicationContextAware, IntrospectableController {
    ApplicationContext context;
    
	@Override
	public void setApplicationContext(ApplicationContext arg0)
			throws BeansException {
		context=arg0;
		
	}
	
	@Override
	public ServiceSpecies getServiceSpecies() {
		Object serviceBean = context.getBean(${classSimpleName}.class);
		
		return ServiceSpecies.speciesOf(serviceBean);
	}
	
#*
	For each service method to be published, generate a method in the controller
*###
#foreach($method in $methods)
#set( $arguments = "" ) ## The method signature
#set( $subarg = "" )    ## The arguments used in the controller to invoke the service
#set( $path = $method.simpleName )
#foreach($parameter in $method.Parameters)
#set( $type = $parameter.asType() )
#set( $arguments = "${arguments}#{if}($foreach.count > 1), #{end}" )
#*
	Add the annotation @RequestParam(...) to the method signature
*###
#if ($tools.isMappedParameter($parameter))
#set( $arguments = "${arguments}" + '@RequestParam(value = "' + $parameter.simpleName + '"')
#*
	Process annotations on the service parameter
*###
#*
	Handle @Optional
*###
#if ($tools.isOptionalParameter($parameter))
#set( $arguments = "${arguments}, required=false" )
#if ($tools.hasDefaultValue($parameter))
#set( $arguments = "${arguments}" + ', defaultValue=' + $tools.getDefaultLiteralValue($parameter))
#end
#end
#set( $arguments = "${arguments}" + ')' )
#end#*
	Add the parameter name to the signature
*###
#set( $arguments = "${arguments} $type $parameter.simpleName" )
#set( $subarg = "${subarg}#{if}($foreach.count > 1), #{end}$parameter.simpleName" )
#end
#*
	Prepare throws declaration
*###
#set( $throwsDeclaration = "")
#if (!$method.thrownTypes.isEmpty())
#set( $throwsDeclaration = " throws")
#foreach ($tt in $method.thrownTypes)
#if ($foreach.count > 1)
#set( $throwsDeclaration = "$throwsDeclaration," )
#end
#set( $throwsDeclaration = "$throwsDeclaration $tt" )
#end
#end

    @RequestMapping(value = "${controllerPathPrefix}/${classSimpleName}/${path}", method = $tools.getRequestMethodAsSource($method), produces = "application/json;charset=UTF-8")
	public #if ($tools.isMappedToVoid($method)) void #else HttpEntity<#if($tools.isVoidMethod($method))
String
#else
Response<${method.returnType}>
#end> #end  ${method.simpleName}Published(${arguments}) $throwsDeclaration
	{
	
#if($tools.isMappedToVoid($method))
		${classSimpleName} fun = (${classSimpleName}) context.getBean(${classSimpleName}.class);
		fun.${method.simpleName}(${subarg});
#else
#if($tools.isVoidMethod($method))
		String body;

		${classSimpleName} fun = (${classSimpleName}) context.getBean(${classSimpleName}.class);
		fun.${method.simpleName}(${subarg});		
		body = ServletUtilities.getService().createReplyResponse($tools.toStringLiteral($path.toString()), RepliesStatus.ok, SerializationType.json).getResponseContent();
#else
		
		${classSimpleName} fun = (${classSimpleName}) context.getBean(${classSimpleName}.class);
		${method.returnType} body = fun.${method.simpleName}(${subarg});
#end
		HttpHeaders responseHeaders = new HttpHeaders();
   		
#if($tools.isVoidMethod($method))
  		return new HttpEntity<>(body, responseHeaders);	 
#else
	return new HttpEntity<>(new Response<>(body), responseHeaders);	
#end
#end	
    }
#end
}