'@type': it.uniroma2.art.semanticturkey.config.customservice.CustomService
name: OntoLexLemonReport
operations:
 - '@type': it.uniroma2.art.semanticturkey.extension.impl.customservice.sparql.SPARQLOperation
   name: getNumberOfLexicons
   returns:
     name: integer
   authorization: rdf(limeLexicon), R
   sparql: |
    PREFIX lime: <http://www.w3.org/ns/lemon/lime#>
    SELECT (COUNT(DISTINCT ?lexicon) as ?lexiconCount) WHERE {
      GRAPH ?workingGraph {
        ?lexicon a lime:Lexicon
      }
    }
 - '@type': it.uniroma2.art.semanticturkey.extension.impl.customservice.sparql.SPARQLOperation
   name: getNumberOfLexicalizationsByPattern
   returns:
     name: TupleQueryResult
   authorization: rdf(resource,lexicalization), R
   sparql: |
    PREFIX ontolex: <http://www.w3.org/ns/lemon/ontolex#>
    SELECT * WHERE {
      {SELECT (COUNT(DISTINCT *) as ?plain) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:isDenotedBy|^ontolex:denotes ?lexicalEntry .
        }
      }}
      {SELECT (COUNT(DISTINCT *) as ?plain_from_entity_to_lexical_entry) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:isDenotedBy ?lexicalEntry .
        }
      }}
      {SELECT (COUNT(DISTINCT *) as ?plain_from_lexical_entry_to_entity) WHERE {
        GRAPH ?workingGraph {
          ?lexicalEntry ontolex:denotes ?entity .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense) WHERE {
        GRAPH ?workingGraph {
          ?lexicalEntry (ontolex:sense|^ontolex:isSenseOf)/(ontolex:reference|^ontolex:isReferenceOf) ?entity .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_from_lexical_entry_to_entity) WHERE {
        GRAPH ?workingGraph {
          ?lexicalEntry ontolex:sense/ontolex:reference ?entity .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_from_entity_to_lexical_entry) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:isReferenceOf/ontolex:isSenseOf ?lexicalEntry .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_to) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:isReferenceOf/^ontolex:sense ?lexicalEntry .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_from) WHERE {
        GRAPH ?workingGraph {
          ?entity ^ontolex:reference/ontolex:isSenseOf ?lexicalEntry .
        }
      }}       
    }
 - '@type': it.uniroma2.art.semanticturkey.extension.impl.customservice.sparql.SPARQLOperation
   name: getNumberOfConceptualizationsByPattern
   returns:
     name: TupleQueryResult
   authorization: rdf(resource,conceptualization), R
   sparql: |
    PREFIX ontolex: <http://www.w3.org/ns/lemon/ontolex#>
    SELECT * WHERE {
      {SELECT (COUNT(DISTINCT *) as ?plain) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:isEvokedBy|^ontolex:evokes ?lexicalEntry .
        }
      }}
      {SELECT (COUNT(DISTINCT *) as ?plain_from_concept_to_lexical_entry) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:isEvokedBy ?lexicalEntry .
        }
      }}
      {SELECT (COUNT(DISTINCT *) as ?plain_from_lexical_entry_to_concept) WHERE {
        GRAPH ?workingGraph {
          ?lexicalEntry ontolex:evokes ?entity .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense) WHERE {
        GRAPH ?workingGraph {
          ?lexicalEntry (ontolex:sense|^ontolex:isSenseOf)/(ontolex:isLexicalizedSenseOf|^ontolex:lexicalizedSense) ?entity .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_from_lexical_entry_to_concept) WHERE {
        GRAPH ?workingGraph {
          ?lexicalEntry ontolex:sense/ontolex:isLexicalizedSenseOf ?entity .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_from_concept_to_lexical_entry) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:lexicalizedSense/ontolex:isSenseOf ?lexicalEntry .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_to) WHERE {
        GRAPH ?workingGraph {
          ?entity ontolex:lexicalizedSense/^ontolex:sense ?lexicalEntry .
        }
      }}       
      {SELECT (COUNT(DISTINCT *) as ?sense_from) WHERE {
        GRAPH ?workingGraph {
          ?entity ^ontolex:isLexicalizedSenseOf/ontolex:isSenseOf ?lexicalEntry .
        }
      }}       
    }