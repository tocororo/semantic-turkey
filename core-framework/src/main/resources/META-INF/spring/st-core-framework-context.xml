<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgi="http://www.springframework.org/schema/osgi"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">


	<!-- Scans the main package of this extension, and some packages provided 
		by ST framework -->
	<context:component-scan
		base-package="it.uniroma2.art.semanticturkey" />

	<task:annotation-driven executor="myExecutor"
		scheduler="myScheduler" />
	<task:executor id="myExecutor" pool-size="5" />
	<task:scheduler id="myScheduler" pool-size="10" />

	<!-- Enables event propagation across application contexts -->
	<bean
		class="it.uniroma2.art.semanticturkey.event.support.CrossContextPropagationEventListener" />

	<!-- Enables annotation based event listeners -->
	<bean
		class="it.uniroma2.art.semanticturkey.event.annotation.EventListenerAnnotationBeanPostProcessor" />

	<!-- Registers the it.uniroma2.art.semanticturkey.repository.config.ReadOnlyRepositoryWrapperFactory -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="it.uniroma2.art.semanticturkey.repository.config.ReadOnlyRepositoryWrapperFactory.registerFactory" />
	</bean>

	<bean id="resourceMetadataManager"
		class="it.uniroma2.art.semanticturkey.versioning.ResourceMetadataManager" />
	<osgi:service ref="resourceMetadataManager"
  		interface="it.uniroma2.art.semanticturkey.versioning.ResourceMetadataManager"/>

	<bean id="resourceChangeNotificationManager"
		class="it.uniroma2.art.semanticturkey.notification.ResourceChangeNotificationManager" />
	<osgi:service ref="resourceChangeNotificationManager"
		interface="it.uniroma2.art.semanticturkey.notification.ResourceChangeNotificationManager"/>

	<!-- Imports the MAPALE faÃ§ade -->
	<osgi:reference id="mediationFramework"
		interface="it.uniroma2.art.maple.orchestration.MediationFramework" />

	<!-- Retrieves coda osgi factory -->
	<osgi:reference id="codaOSGiFactory"
		interface="it.uniroma2.art.coda.osgi.bundle.CODAOSGiFactory" />

	<!-- the following reference was made optional (cardinality = 0..1) because 
		of a circular dependency between st-core-framework and st-metadata-registry-bindings 
		(that prevented the initialization of the application context associated 
		with either bundle -->
	<osgi:reference
		interface="it.uniroma2.art.semanticturkey.mdr.bindings.STMetadataRegistryBackend"
		id="metadataRegistry" cardinality="0..1">
	</osgi:reference>

	<!-- Publishes the ResourceLocator as an OSGi service -->
	<bean id="resourceLocator"
		class="it.uniroma2.art.semanticturkey.data.access.ResourceLocator" />

	<osgi:service
		interface="it.uniroma2.art.semanticturkey.data.access.ResourceLocator"
		ref="resourceLocator">
	</osgi:service>

	<!-- Publishes CustomFormManager as an OSGi service (bean instance generated 
		based on annotations) -->
	<osgi:service
		interface="it.uniroma2.art.semanticturkey.customform.CustomFormManager"
		ref="customFormManager">
	</osgi:service>

	<!-- Publishes CODACoreProvider as an OSGi service (bean instance generated 
		based on annotations) -->
	<osgi:service
		interface="it.uniroma2.art.semanticturkey.customform.CODACoreProvider"
		ref="CODACoreProvider">
	</osgi:service>


	<!-- Instantiates the ExtensionPointManager implementation -->
	<bean id="extensionPointManager"
		class="it.uniroma2.art.semanticturkey.extension.impl.ExtensionPointManagerImpl" />

	<!-- Publishes the ExtensionPointerManager as an OSGi service -->
	<osgi:service
		interface="it.uniroma2.art.semanticturkey.extension.ExtensionPointManager"
		ref="extensionPointManager">
	</osgi:service>

	<!-- Publishes the SPARQLStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.urigen.URIGeneratorExtensionPoint" />
	</osgi:service>

	<!-- Publishes the RenderingEngine extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.rendering.RenderingEngineExtensionPoint" />
	</osgi:service>

	<!-- Publishes the RDFTransformer extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.rdftransformer.RDFTransformerExtensionPoint" />
	</osgi:service>

	<!-- Publishes the CollaborationBackend extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.collaboration.CollaborationBackendExtensionPoint" />
	</osgi:service>

	<!-- Publishes the DatasetMetadataExporter extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.datasetmetadata.DatasetMetadataExporterExtensionPoint" />
	</osgi:service>

	<!-- Publishes the RepositoryImplConfigurer extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.repositoryimplconfigurer.RepositoryImplConfigurerExtensionPoint" />
	</osgi:service>

	<!-- Publishes the SearchStrategy extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.search.SearchStrategyExtensionPoint" />
	</osgi:service>

	<!-- Publishes the SPARQLStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.sparql.SPARQLStore" />
	</osgi:service>

	<!-- Publishes the SPARQLParameterizationStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.sparql.SPARQLParameterizationStore" />
	</osgi:service>

	<!-- Publishes the AdvancedGraphApplicationStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.sheet2rdf.AdvancedGraphApplicationStore" />
	</osgi:service>

	<!-- Publishes the ProjectMetadataStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.settings.metadata.ProjectMetadataStore" />
	</osgi:service>

	<!-- Publishes the CustomSearchStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.settings.search.CustomSearchStore" />
	</osgi:service>

	<!-- Publishes the CustomProjectFacetsSchemaStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.settings.facets.CustomProjectFacetsSchemaStore" />
	</osgi:service>

	<!-- Publishes the ProjectFacetsStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.settings.facets.ProjectFacetsStore" />
	</osgi:service>

	<!-- Publishes the DownloadSettingsManager -->

	<osgi:service auto-export="interfaces">
		<bean
				class="it.uniroma2.art.semanticturkey.settings.download.DownloadSettingsManager" />
	</osgi:service>

	<!-- Publishes the NotificationSystemSettingsManager -->

	<bean id="notificationSystemSettingsManager"
		class="it.uniroma2.art.semanticturkey.settings.notification.NotificationSystemSettingsManager" />

	<osgi:service auto-export="interfaces"
		ref="notificationSystemSettingsManager" />

	<!-- Publishes the managers for content negotiation and http resolution -->

	<osgi:service auto-export="interfaces">
		<bean class="it.uniroma2.art.semanticturkey.settings.contentnegotiation.ContentNegotiationManager" />
	</osgi:service>

	<osgi:service auto-export="interfaces">
		<bean class="it.uniroma2.art.semanticturkey.settings.uri2projectresolution.Uri2ProjectResolutionManager" />
	</osgi:service>

	<!-- Publishes the ContributionStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.contribution.ContributionStore" />
	</osgi:service>

	<!-- Publishes the TemplateStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.template.TemplateStore" />
	</osgi:service>

	<!-- Publishes the Exporter -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.exporter.Exporter" />
	</osgi:service>

	<!-- Publishes the Deployer extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.deployer.DeployerExtensionPoint" />
	</osgi:service>

	<!-- Publishes the StreamSourcedDeployer extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.deployer.StreamSourcedDeployerExtensionPoint" />
	</osgi:service>

	<!-- Publishes the RepositorySourcedDeployer extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.deployer.RepositorySourcedDeployerExtensionPoint" />
	</osgi:service>

	<!-- Publishes the ReformattingExporter extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.reformattingexporter.ReformattingExporterExtensionPoint" />
	</osgi:service>

	<!-- Publishes the RDFLifter extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.rdflifter.RDFLifterExtensionPoint" />
	</osgi:service>

	<!-- Publishes the Loader extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.loader.LoaderExtensionPoint" />
	</osgi:service>

	<!-- Publishes the StreamTargetingLoader extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.loader.StreamTargetingLoaderExtensionPoint" />
	</osgi:service>

	<!-- Publishes the RepositoryTargetingLoader extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.loader.RepositoryTargetingLoaderExtensionPoint" />
	</osgi:service>

	<!-- Publishes the Importer -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.importer.Importer" />
	</osgi:service>

	<!-- Publishes the CustomServiceDefinitionStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.customservice.CustomServiceDefinitionStore" />
	</osgi:service>

	<!-- Publishes the CustomServiceBackend extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.customservice.CustomServiceBackendExtensionPoint" />
	</osgi:service>

	<!-- Publishes the DatasetCatalogConnector extension point -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.extension.extpts.datasetcatalog.DatasetCatalogConnectorExtensionPoint" />
	</osgi:service>

	<!-- Publishes the InvokableReporterStore -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.invokablereporter.InvokableReporterStore" />
	</osgi:service>

	<!-- Publishes the stores about ResourceMetadata -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.resourcemetadata.ResourceMetadataPatternStore" />
	</osgi:service>
	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.resourcemetadata.ResourceMetadataAssociationStore" />
	</osgi:service>

	<!-- Publishes the stores about CustomViews -->

	<osgi:service auto-export="interfaces">
		<bean
				class="it.uniroma2.art.semanticturkey.config.customview.CustomViewStore" />
	</osgi:service>
	<osgi:service auto-export="interfaces">
		<bean
				class="it.uniroma2.art.semanticturkey.config.customview.CustomViewAssociationStore" />
	</osgi:service>


	<!-- Publishes the stores about Remote Alignment Services -->

	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.config.alignmentservices.RemoteAlignmentServicesStore" />
	</osgi:service>
	<osgi:service auto-export="interfaces">
		<bean
			class="it.uniroma2.art.semanticturkey.settings.alignmentservices.RemoteAlignmentServiceProjectSettingsManager" />
	</osgi:service>

	<!-- Publishes Semantic Turkey core settings managers -->
	<bean id="semanticTurkeyCoreSettingsManager"
			class="it.uniroma2.art.semanticturkey.settings.core.SemanticTurkeyCoreSettingsManager" />
	<osgi:service auto-export="all-classes" ref="semanticTurkeyCoreSettingsManager" />

</beans>